import logging
import yfinance as yf
import numpy as np
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)

# üîë –¢–æ–∫–µ–Ω –∏ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not found in .env file")

TRUSTED_USERS = [1085064193]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_assets = {}
user_states = {}
user_settings = {}  # user_id -> dict —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤", callback_data="add_asset"),
         InlineKeyboardButton("üìä –ú–æ–∏ –∞–∫—Ç–∏–≤—ã", callback_data="my_assets")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
def settings_menu(user_id):
    settings = user_settings.get(user_id, {
        "eps_bp": 5,
        "big_buy_mult": 2,
        "analysis_days": 5,
        "cycle_tf": "5m"
    })
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Ä–æ–≥ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏", callback_data="settings_eps")],
        [InlineKeyboardButton("–ö—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞", callback_data="settings_bigbuy")],
        [InlineKeyboardButton("–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞", callback_data="settings_days")],
        [InlineKeyboardButton("–¢–∞–π–º—Ñ—Ä–µ–π–º —Ü–∏–∫–ª–∞", callback_data="settings_tf")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    text = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"–ü–æ—Ä–æ–≥ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {settings['eps_bp']} bps\n"
        f"–ö—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: {settings['big_buy_mult']}√ó —Å—Ä–µ–¥–Ω–µ–≥–æ\n"
        f"–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {settings['analysis_days']} –¥–Ω–µ–π\n"
        f"–¢–∞–π–º—Ñ—Ä–µ–π–º —Ü–∏–∫–ª–∞: {settings['cycle_tf']}\n"
    )
    return InlineKeyboardMarkup(keyboard), text

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in TRUSTED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –º–µ–Ω—é –∞–∫—Ç–∏–≤–æ–≤ ---
async def show_assets_menu(query, user_id, page=0):
    assets = user_assets.get(user_id, [])
    per_page = 5
    start = page * per_page
    end = start + per_page
    page_assets = assets[start:end]

    keyboard = [[InlineKeyboardButton(a, callback_data=f"asset_{a}")] for a in page_assets]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page_{page-1}"))
    if end < len(assets):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await query.edit_message_text("–í–∞—à–∏ –∞–∫—Ç–∏–≤—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

# --- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞–¥–∏–∏ —Ü–∏–∫–ª–∞ ---
def classify_cycle(df):
    df = df.copy()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ü–µ–Ω
    price_column = "Adj Close" if "Adj Close" in df.columns else "Close"
    
    df["EMA20"] = df[price_column].ewm(span=20, adjust=False).mean()
    ema_slope = df["EMA20"].iloc[-1] - df["EMA20"].iloc[-2] if len(df) >= 2 else 0.0
    close = df[price_column].iloc[-1]
    ema = df["EMA20"].iloc[-1]
    above = close > ema
    near_flat_ema = abs(ema_slope) < (df[price_column].std() * 0.02 if df[price_column].std() else 0.0)

    delta = np.sign(df[price_column].diff().fillna(0))
    obv = (delta * df["Volume"]).fillna(0).cumsum()
    obv_slope = obv.iloc[-1] - (obv.iloc[-10] if len(obv) >= 10 else 0)

    window = df[price_column].tail(50)
    rng = (window.max() - window.min()) if len(window) > 0 else 0
    in_range = (rng > 0) and (window.min() + 0.2 * rng < close < window.max() - 0.2 * rng)

    if ema_slope > 0 and above and obv_slope > 0:
        return "Markup (—Ä–æ—Å—Ç)"
    if ema_slope < 0 and not above and obv_slope < 0:
        return "Markdown (–ø–∞–¥–µ–Ω–∏–µ)"
    if near_flat_ema and in_range and obv_slope >= 0:
        return "Accumulation (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ)"
    if near_flat_ema and in_range and obv_slope < 0:
        return "Distribution (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"
    return "Transition (–ø–µ—Ä–µ—Ö–æ–¥)"

# --- –ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ ---
def estimate_liquidity(df, eps_bp=5):
    if df.empty or "Volume" not in df:
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ü–µ–Ω
    price_column = "Adj Close" if "Adj Close" in df.columns else "Close"
    
    if price_column not in df:
        return None
        
    df["ret_abs"] = (df[price_column].pct_change().abs()).fillna(0)
    valid = df[(df["Volume"] > 0) & (df["ret_abs"] < 0.1)]
    if len(valid) < 20:
        return None
    lam = np.median((valid["ret_abs"] / valid["Volume"]).replace([np.inf, -np.inf], np.nan).dropna())
    if lam is None or lam <= 0:
        return None
    epsilon = eps_bp / 10000.0
    Q = epsilon / lam
    avg_vol = valid["Volume"].mean()
    Q = max(Q, 100.0)
    Q = min(Q, 10.0 * avg_vol)
    return int(Q)

# --- –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫—Ä—É–ø–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ ---
def detect_last_large_buy(df, mult=2):
    if df.empty:
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ü–µ–Ω
    price_column = "Adj Close" if "Adj Close" in df.columns else "Close"
    
    look = df.tail(100) if len(df) >= 100 else df
    avg_vol = look["Volume"].mean() if len(look) > 0 else df["Volume"].mean()
    for idx in range(len(df) - 1, -1, -1):
        row = df.iloc[idx]
        rng = (row["High"] - row["Low"]) if (row["High"] >= row["Low"]) else 0
        near_high = (rng == 0) or ((row["High"] - row[price_column]) <= 0.1 * (rng + 1e-9))
        if (row["Volume"] > mult * (avg_vol if avg_vol else 1)) and near_high:
            ts = df.index[idx].to_pydatetime()
            return ts, int(row["Volume"])
    return None

# --- –†–∞—Å—á–µ—Ç CAGR (Compound Annual Growth Rate) ---
def calculate_cagr(ticker, period="5y"):
    stock = yf.Ticker(ticker)
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    hist = stock.history(period=period)
    if len(hist) < 2:
        raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ CAGR")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Adj Close –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ Close
    if "Adj Close" in hist.columns:
        price_column = "Adj Close"
    elif "Close" in hist.columns:
        price_column = "Close"
    else:
        raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö")
    
    start_price = hist[price_column].iloc[0]
    end_price = hist[price_column].iloc[-1]
    
    days = (hist.index[-1] - hist.index[0]).days
    years = days / 365.25
    
    # CAGR = (End Value / Start Value)^(1/n) - 1
    # –≥–¥–µ n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
    cagr = ((end_price / start_price) ** (1.0/years)) - 1
    return cagr * 100, f"https://finance.yahoo.com/quote/{ticker}"

# --- –†–∞—Å—á–µ—Ç EPS (Earnings Per Share) ---
def calculate_eps(ticker):
    stock = yf.Ticker(ticker)
    info = stock.info
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å EPS –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if "trailingEps" in info and info["trailingEps"] is not None:
        return info["trailingEps"], f"https://finance.yahoo.com/quote/{ticker}/key-statistics"
    elif "epsTrailingTwelveMonths" in info and info["epsTrailingTwelveMonths"] is not None:
        return info["epsTrailingTwelveMonths"], f"https://finance.yahoo.com/quote/{ticker}/key-statistics"
    else:
        raise Exception("EPS –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–∞")

# --- –†–∞—Å—á–µ—Ç –±–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ ---
def calculate_beta(ticker, benchmark="^GSPC", period="3y"):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞ –∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (S&P 500 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    stock = yf.Ticker(ticker)
    benchmark_stock = yf.Ticker(benchmark)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    stock_hist = stock.history(period=period)
    benchmark_hist = benchmark_stock.history(period=period)
    
    if len(stock_hist) < 30 or len(benchmark_hist) < 30:
        raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ü–µ–Ω
    stock_price_col = "Adj Close" if "Adj Close" in stock_hist.columns else "Close"
    benchmark_price_col = "Adj Close" if "Adj Close" in benchmark_hist.columns else "Close"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    stock_returns = stock_hist[stock_price_col].pct_change().dropna()
    benchmark_returns = benchmark_hist[benchmark_price_col].pct_change().dropna()
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
    aligned_data = stock_returns.align(benchmark_returns, join='inner')
    stock_returns_aligned = aligned_data[0]
    benchmark_returns_aligned = aligned_data[1]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    covariance = np.cov(stock_returns_aligned, benchmark_returns_aligned)[0][1]
    benchmark_variance = np.var(benchmark_returns_aligned)
    
    if benchmark_variance == 0:
        raise Exception("–î–∏—Å–ø–µ—Ä—Å–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é")
    
    beta = covariance / benchmark_variance
    return beta, f"https://finance.yahoo.com/quote/{ticker}"

# --- –†–∞—Å—á–µ—Ç –±–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (5 –ª–µ—Ç, –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) ---
def calculate_beta_5y_monthly(ticker, benchmark="^GSPC"):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞ –∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (S&P 500 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    stock = yf.Ticker(ticker)
    benchmark_stock = yf.Ticker(benchmark)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 5-–ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥ —Å –º–µ—Å—è—á–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    stock_hist = stock.history(period="5y", interval="1mo")
    benchmark_hist = benchmark_stock.history(period="5y", interval="1mo")
    
    if len(stock_hist) < 12 or len(benchmark_hist) < 12:
        raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (5y monthly)")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ü–µ–Ω
    stock_price_col = "Adj Close" if "Adj Close" in stock_hist.columns else "Close"
    benchmark_price_col = "Adj Close" if "Adj Close" in benchmark_hist.columns else "Close"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    stock_returns = stock_hist[stock_price_col].pct_change().dropna()
    benchmark_returns = benchmark_hist[benchmark_price_col].pct_change().dropna()
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
    aligned_data = stock_returns.align(benchmark_returns, join='inner')
    stock_returns_aligned = aligned_data[0]
    benchmark_returns_aligned = aligned_data[1]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    covariance = np.cov(stock_returns_aligned, benchmark_returns_aligned)[0][1]
    benchmark_variance = np.var(benchmark_returns_aligned)
    
    if benchmark_variance == 0:
        raise Exception("–î–∏—Å–ø–µ—Ä—Å–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é")
    
    beta = covariance / benchmark_variance
    return beta, f"https://finance.yahoo.com/quote/{ticker}"

def build_info_text(ticker, user_id=None):
    settings = user_settings.get(user_id, {
        "eps_bp": 5,
        "big_buy_mult": 2,
        "analysis_days": 5,
        "cycle_tf": "5m"
    })

    stock = yf.Ticker(ticker)
    df = stock.history(period=f"{settings['analysis_days']}d", interval=settings['cycle_tf'])
    if df.empty:
        return "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞."

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ü–µ–Ω
    price_column = "Adj Close" if "Adj Close" in df.columns else "Close"

    last = df.iloc[-1]
    price = round(float(last[price_column]), 4)
    ts = last.name.to_pydatetime()

    look = df.tail(100) if len(df) >= 100 else df
    avg_vol = look["Volume"].mean() if len(look) > 0 else df["Volume"].mean()
    rvol = 0.0
    if avg_vol is not None and avg_vol > 0:
        rvol = float(last["Volume"]) / avg_vol

    approx_book_vol = estimate_liquidity(df.tail(200), eps_bp=settings["eps_bp"])
    stage = classify_cycle(df)
    big = detect_last_large_buy(df, mult=settings["big_buy_mult"])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    info = []
    info.append(f"‚ÑπÔ∏è {ticker}")
    info.append(f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {ts.strftime('%Y-%m-%d %H:%M')}")
    info.append(f"üíµ –¶–µ–Ω–∞: {price} USD")
    info.append(f"üìä –û–±—ä—ë–º (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞): {int(last['Volume'])}")
    info.append(f"üìà RVOL: {rvol:.2f}√ó —Å—Ä–µ–¥–Ω–µ–≥–æ")
    info.append(f"üß≠ –°—Ç–∞–¥–∏—è —Ü–∏–∫–ª–∞ ({settings['analysis_days']} –¥–Ω–µ–π): {stage}")
    
    if approx_book_vol is not None:
        info.append(f"üì• –û–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π): ~{approx_book_vol} –∞–∫—Ü–∏–π")
    else:
        info.append("üì• –û–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π): –æ—Ü–µ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
    if big:
        ts_big, vol_big = big
        info.append(f"üöÄ –ü–æ—Å–ª–µ–¥–Ω—è—è –∫—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: {ts_big.strftime('%Y-%m-%d %H:%M')}, –æ–±—ä—ë–º {vol_big}")
    else:
        info.append("üöÄ –ü–æ—Å–ª–µ–¥–Ω—è—è –∫—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

    return "\n\n".join(info)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in TRUSTED_USERS:
        await query.edit_message_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if query.data == "add_asset":
        user_states[user_id] = "waiting_for_asset"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL):",
                                      reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "my_assets":
        assets = user_assets.get(user_id, [])
        if not assets:
            await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤.", reply_markup=main_menu())
            return
        await show_assets_menu(query, user_id, page=0)

    elif query.data.startswith("asset_"):
        ticker = query.data.split("_", 1)[1]
        keyboard = [
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"info_{ticker}"),
             InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤", callback_data=f"delete_{ticker}")],
            [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data=f"calc_{ticker}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_assets")]
        ]
        await query.edit_message_text(f"–ê–∫—Ç–∏–≤ {ticker}", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("info_"):
        ticker = query.data.split("_", 1)[1]
        try:
            text = build_info_text(ticker, user_id)
            await query.edit_message_text(text)
            await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
            await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif query.data.startswith("delete_"):
        ticker = query.data.split("_", 1)[1]
        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_assets and ticker in user_assets[user_id]:
            user_assets[user_id].remove(ticker)
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if not user_assets[user_id]:
                del user_assets[user_id]
            await query.edit_message_text(f"‚úÖ –ê–∫—Ç–∏–≤ {ticker} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=main_menu())
        else:
            await query.edit_message_text(f"‚ùå –ê–∫—Ç–∏–≤ {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=main_menu())

    elif query.data.startswith("calc_"):
        ticker = query.data.split("_", 1)[1]
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("CAGR", callback_data=f"cagr_{ticker}"),
             InlineKeyboardButton("EPS", callback_data=f"eps_{ticker}")],
            [InlineKeyboardButton("–ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", callback_data=f"beta_{ticker}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"asset_{ticker}")]
        ]
        await query.edit_message_text(f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è {ticker}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("cagr_"):
        ticker = query.data.split("_", 1)[1]
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º CAGR –¥–ª—è 3 –ª–µ—Ç –∏ 5 –ª–µ—Ç
            cagr_5y_value, source_url = calculate_cagr(ticker, period="5y")
            cagr_3y_value, _ = calculate_cagr(ticker, period="3y")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            message_text = f"üìà CAGR –¥–ª—è {ticker}:\n\n"
            message_text += f"5-–ª–µ—Ç–Ω–∏–π: {cagr_5y_value:.2f}%\n"
            message_text += f"3-–ª–µ—Ç–Ω–∏–π: {cagr_3y_value:.2f}%\n\n"
            message_text += f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source_url}\n"
            message_text += f"–§–æ—Ä–º—É–ª–∞: CAGR = (–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å / –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)^(1/n) - 1"
            
            await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calc_{ticker}")]]))
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ CAGR –¥–ª—è {ticker}: {str(e)}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calc_{ticker}")]]))

    elif query.data.startswith("eps_"):
        ticker = query.data.split("_", 1)[1]
        try:
            eps_value, source_url = calculate_eps(ticker)
            message_text = f"üìä EPS –¥–ª—è {ticker}: ${eps_value:.2f}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source_url}"
            await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calc_{ticker}")]]))
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ EPS –¥–ª—è {ticker}: {str(e)}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calc_{ticker}")]]))

    elif query.data.startswith("beta_"):
        ticker = query.data.split("_", 1)[1]
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ—Ç–∞
            beta_3y_value, source_url = calculate_beta(ticker)
            beta_5y_value, _ = calculate_beta_5y_monthly(ticker)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            message_text = f"üìä –ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è {ticker}:\n\n"
            message_text += f"5-–ª–µ—Ç–Ω–∏–π (–º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): {beta_5y_value:.2f}\n"
            message_text += f"3-–ª–µ—Ç–Ω–∏–π (–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): {beta_3y_value:.2f}\n\n"
            message_text += f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source_url}\n"
            message_text += f"–§–æ—Ä–º—É–ª–∞: Œ≤ = Cov(Ri, Rm) / Var(Rm)"
            
            await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calc_{ticker}")]]))
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è {ticker}: {str(e)}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calc_{ticker}")]]))

    elif query.data == "settings":
        kb, text = settings_menu(user_id)
        await query.edit_message_text(text, reply_markup=kb)

    elif query.data.startswith("set_eps_"):
        val = int(query.data.split("_")[2])
        user_settings.setdefault(user_id, {"eps_bp": 5, "big_buy_mult": 2, "analysis_days": 5, "cycle_tf": "5m"})
        user_settings[user_id]["eps_bp"] = val
        kb, text = settings_menu(user_id)
        await query.edit_message_text(f"‚úÖ –ü–æ—Ä–æ–≥ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {val} bps\n\n{text}", reply_markup=kb)

    elif query.data.startswith("set_bigbuy_"):
        val = int(query.data.split("_")[2])
        user_settings.setdefault(user_id, {"eps_bp": 5, "big_buy_mult": 2, "analysis_days": 5, "cycle_tf": "5m"})
        user_settings[user_id]["big_buy_mult"] = val
        kb, text = settings_menu(user_id)
        await query.edit_message_text(f"‚úÖ –ü–æ—Ä–æ–≥ –∫—Ä—É–ø–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {val}√ó —Å—Ä–µ–¥–Ω–µ–≥–æ\n\n{text}", reply_markup=kb)

    elif query.data.startswith("set_days_"):
        val = int(query.data.split("_")[2])
        user_settings.setdefault(user_id, {"eps_bp": 5, "big_buy_mult": 2, "analysis_days": 5, "cycle_tf": "5m"})
        user_settings[user_id]["analysis_days"] = val
        kb, text = settings_menu(user_id)
        await query.edit_message_text(f"‚úÖ –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {val} –¥–Ω–µ–π\n\n{text}", reply_markup=kb)

    elif query.data.startswith("set_tf_"):
        val = query.data.split("_")[2]
        user_settings.setdefault(user_id, {"eps_bp": 5, "big_buy_mult": 2, "analysis_days": 5, "cycle_tf": "5m"})
        user_settings[user_id]["cycle_tf"] = val
        kb, text = settings_menu(user_id)
        await query.edit_message_text(f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º –æ–±–Ω–æ–≤–ª—ë–Ω: {val}\n\n{text}", reply_markup=kb)

    elif query.data == "back":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif query.data.startswith("delete_"):
        ticker = query.data.split("_", 1)[1]
        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_assets and ticker in user_assets[user_id]:
            user_assets[user_id].remove(ticker)
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if not user_assets[user_id]:
                del user_assets[user_id]
            await query.edit_message_text(f"‚úÖ –ê–∫—Ç–∏–≤ {ticker} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=main_menu())
        else:
            await query.edit_message_text(f"‚ùå –ê–∫—Ç–∏–≤ {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=main_menu())

    elif query.data.startswith("page_"):
        page = int(query.data.split("_")[1])
        await show_assets_menu(query, user_id, page)

    elif query.data == "settings_eps":
        kb = [
            [InlineKeyboardButton("2 bps", callback_data="set_eps_2"),
             InlineKeyboardButton("5 bps", callback_data="set_eps_5"),
             InlineKeyboardButton("10 bps", callback_data="set_eps_10")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:", reply_markup=InlineKeyboardMarkup(kb))

    elif query.data == "settings_bigbuy":
        kb = [
            [InlineKeyboardButton("2√ó", callback_data="set_bigbuy_2"),
             InlineKeyboardButton("3√ó", callback_data="set_bigbuy_3"),
             InlineKeyboardButton("5√ó", callback_data="set_bigbuy_5")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—Ä—É–ø–Ω–æ–π –ø–æ–∫—É–ø–∫–∏:", reply_markup=InlineKeyboardMarkup(kb))

    elif query.data == "settings_days":
        kb = [
            [InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data="set_days_1"),
             InlineKeyboardButton("3 –¥–Ω—è", callback_data="set_days_3"),
             InlineKeyboardButton("5 –¥–Ω–µ–π", callback_data="set_days_5")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª—É–±–∏–Ω—É –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=InlineKeyboardMarkup(kb))

    elif query.data == "settings_tf":
        kb = [
            [InlineKeyboardButton("5m", callback_data="set_tf_5m"),
             InlineKeyboardButton("15m", callback_data="set_tf_15m")],
            [InlineKeyboardButton("1h", callback_data="set_tf_1h"),
             InlineKeyboardButton("1d", callback_data="set_tf_1d")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Å—Ç–∞–¥–∏–π —Ü–∏–∫–ª–∞:", reply_markup=InlineKeyboardMarkup(kb))

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in TRUSTED_USERS:
        return

    if user_states.get(user_id) == "waiting_for_asset":
        ticker = update.message.text.strip().upper()
        user_assets.setdefault(user_id, [])
        if ticker not in user_assets[user_id]:
            user_assets[user_id].append(ticker)
        user_states[user_id] = None
        await update.message.reply_text(f"‚úÖ –ê–∫—Ç–∏–≤ {ticker} –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()

